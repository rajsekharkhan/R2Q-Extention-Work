requester domain
----------------
Requester_Set_Generation.java
----------------
	domain(user_id, security_level, initial_random_unalikability_score)

	D1_requester
	D2_requester
	D3_requester
	D4_requester
	D5_requester


Request_set
-----------
Request_Set_Generation.java
-----------------------

	request_set(request_id, request_domain, object_mode, access_mode, initial_random_risk)



requrst_set_domain_wise : request set sorted into different file according to their owner
-----------------------
request_set_domain.java
------------------------
	Request1_set
	Request2_set
	Request3_set
	Request4_set
	Request5_set






request_set is again sorted into different set according to their risk score.

High_Request_Set
-----------------
Set_of_high_Risk_Request.java
------------------------------
risk_score > 0.8


Medium_Request_set
------------------
Set_of_medium_Risk_Request.java
--------------------------------
0.8> risk_score> 0.5


Low_Request_Set
----------------
Set_of_low_risk_request.java
----------------------------
0.5> risk score


request_set again sorted into different set according to their access modes and finally their probablity is recorded in a final file.

Pe_request_set
Pv_request_set
Pex_request_set
P_access_result
---------------
P_access_generation.java
-------------------------


user specific historical request set created(15 collaboration)
--------------------------------------------------------------
GenerationOfUserSpecificHistoricalRequestSetUpdated.java
--------------------------------------------------------------


updated_requester_file
----------------------
GenerationOfUserSpecificHistoricalRequestSetUpdated.java
-------------------------------------------------------------

	updated_requester_file(user_id,SSL,requester_type(anomolous/normal),current_unalikability_Score, reputation_score)
 
	**** reputatation score computed from the inverse_gompertz_function();********

-------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------

Generation of Collaboration Request at Simulation Runtime
----------------------------------------------------------

(1) file 1 : request file, where each tuple/record is in form of ((O_j, a_j) and the corresponding random risk score);
(2) file-2 : requester file, where each tuple/record is in form of (requester_id,security_level,current_unalikability_score)
		updated_requester_file => requester_id,initial_unalikability_score,current_unalik_score
		D1_requester => requester_id, security_level, initial_random_unalikability_score

output file : collaboration request file, where each tuple/record is ID, Î¼_(r_l), reputation score, (O_j, a_j), and risk score

RUNTIME_COLLABORATION FILE :
----------------------------

	 uid+","+request+","+risk+","+current_mu+","+ reputation_score
	UID, request_domain, request_obj, obj_sensitivity, access_sensitivity, init random risk, risk_score for this collaboration, current mu score, reputation score

runtime_updated_requester_file :
--------------------------------

	uid, security_level, initial mu_score, reputation score, current mu score



Paj_values
-----------
calculate_Paj.java
-------------------
	compute Paj(Pv, Pe, Pex) values from the historical request set.

-----------



	




	